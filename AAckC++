#include <iostream>
#include <array>
#include <ctime>
#include <algorithm>
#include <cctype>

using namespace std;

/////////////////////////////////////////////////
// Things to do:
//  1. Generate the board DONE!
//  2. Have the players pick a starting position DONE!
//      a. Validate starting position DONE!
//  3. Have the players move their sub
//  4. Have the players shoot a torpedo
///////////////////////////////////////////////////

const int gridWidth = 10;
const int gridLength = 10;
const int gridOutline = 25;

char boardGrid[gridWidth][gridLength];

void printGrid(char myArray[][gridWidth]);
bool validStart(char myArray[][gridWidth]);

bool validInput = false;
bool endGame = false;
bool validMove = false;

int player1X;
int player1Y;

int main()
{
    // Generate the board
    for (int x = 0; x < gridWidth; ++x)
    {
        for (int y = 0; y < gridLength; ++y)
        {
            if ((rand() % 10 + 1) == 10)
                boardGrid[x][y] = '#';  // Islands
            else
                boardGrid[x][y] = 'O';  //
        }
    }

    // Print out the board we just generated
    printGrid(boardGrid);

    // Make sure the user's coordinates is valid
    do
    {
        validInput = validStart(boardGrid);
    }
    while(!validInput);

    // Print out the board again but with the player's position filled in with a 'S'
    printGrid(boardGrid);

    char direction;
    // Message to print to the player every turn
    while (!endGame)
    {
        cout << endl << endl << "Admiral, which direction do you want to go?" << endl
        << "N - North" << endl << "E - East" << endl << "S - South" << endl << "W - West" << endl;

        cin >> direction;

        switch(toupper(direction))
        {
        case 'N':
            if (boardGrid[player1Y - 1][player1X] == '#' || boardGrid[player1Y - 1][player1X] == '|' || (player1Y - 1 < 0))
            {
                cout << endl << endl << "Invalid move!" << endl << endl;
            }
            else
            {
                boardGrid[player1Y][player1X] = 'X';
                boardGrid[player1Y - 1][player1X] = 'S';
                cout << "We are heading North!";
            }
            --player1Y;
            break;
        case 'E':
            if (boardGrid[player1Y][player1X + 1] == '#' || boardGrid[player1Y][player1X + 1] == '|' || (player1X + 1 > 9))
            {
                cout << endl << endl << "Invalid move!" << endl << endl;
            }
            else
            {
                boardGrid[player1Y][player1X] = 'X';
                boardGrid[player1Y][player1X + 1] = 'S';
                cout << "We are heading East!";
            }
            ++player1X;
            break;
        case 'S':
            if (boardGrid[player1Y + 1][player1X] == '#' || boardGrid[player1Y + 1][player1X] == '|' || (player1Y + 1 > 9))
            {
                cout << endl << endl << "Invalid move!" << endl << endl;
            }
            else
            {
                boardGrid[player1Y][player1X] = 'X';
                boardGrid[player1Y + 1][player1X] = 'S';
                cout << "We are heading South!";
            }
            ++player1Y;
            break;
        case 'W':
            if (boardGrid[player1Y][player1X - 1] == '#' || boardGrid[player1Y][player1X - 1] == '|' || (player1X - 1 < 0))
            {
                cout << endl << endl << "Invalid move!" << endl << endl;
            }
            else
            {
                boardGrid[player1Y][player1X] = 'X';
                boardGrid[player1Y][player1X - 1] = 'S';
                cout << "We are heading East!";
            }
            --player1X;
            break;
        default:
            cout << "Please select a valid input!";
            break;
        }
        system("CLS");
        printGrid(boardGrid);
    }

    return 0;
}

// This function prints the current state of the board
void printGrid(char myArray[][gridWidth])
{
    cout << endl << "|  ";
    for (char alpha = 'A';alpha < 'A' + gridWidth; ++alpha)
        cout << alpha << " ";
    for (int x = 0; x < gridWidth; ++x)
    {
        cout << endl << "|" << x << " ";
        for (int y = 0; y < gridLength; ++y)
        {
            cout << myArray[x][y] << " ";
        }

        cout << '|';
    }
}

// Checking the user's starting coordinates and makes sure it is valid
bool validStart(char myArray[][gridWidth])
{
    string start;

    cout << endl << endl << "Please select your starting position. (Column then Row...Ex: B4)" << endl;
    cin >> start;
    std::transform(start.begin(), start.end(),start.begin(), ::toupper);

    player1Y = int(start[1] - 48);
    player1X = int(start[0] - 65);

    if (player1Y > 9 || player1Y < 0 || player1X > 9 || player1X < 0)
        return false;
    else
    {
        // Running through grid to check if player selected an island to start on.
        if (boardGrid[player1Y][player1X] == '#')
        {
            printf("ah ah ah that's not allowed. :)");
            return false;
        }
        else
        {
            boardGrid[player1Y][player1X] = 'S';
            return true;
        }
    }
}
